[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Demo Quarto Page",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "shinylive.html",
    "href": "shinylive.html",
    "title": "Shinylive applications embedded in Quarto documents",
    "section": "",
    "text": "To display a running Shiny app, use a code block with {shinylive-python}.\n#| standalone: true\n#| viewerHeight: 420\n\nfrom shiny import App, render, ui\nimport numpy as np\nimport matplotlib.pyplot as plt\n\napp_ui = ui.page_fluid(\n    ui.layout_sidebar(\n        ui.panel_sidebar(\n            ui.input_slider(\"period\", \"Period\", 0.5, 4, 1, step=0.5),\n            ui.input_slider(\"amplitude\", \"Amplitude\", 0, 2, 1, step=0.25),\n            ui.input_slider(\"shift\", \"Phase shift\", 0, 2, 0, step=0.1),\n        ),\n        ui.panel_main(\n            ui.output_plot(\"plot\"),\n        ),\n    ),\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.plot(alt=\"Sine wave\")\n    def plot():\n        t = np.arange(0.0, 4.0, 0.01)\n        s = input.amplitude() * np.sin(\n            2 * np.pi / input.period() * (t - input.shift() / 2)\n        )\n        fig, ax = plt.subplots()\n        ax.set_ylim([-2, 2])\n        ax.plot(t, s)\n        ax.grid()\n\n\napp = App(app_ui, server)\n\nNote that the code block currently must have #| standalone: true, which indicates that the code represents a complete Shiny application, as opposed to one which has parts spread throughout the document (which will be supported in the future).\nThe example above also uses #| viewerHeight: 420 to set the height of the viewer to 420 pixels."
  },
  {
    "objectID": "shinylive.html#leaflet-example",
    "href": "shinylive.html#leaflet-example",
    "title": "Shinylive applications embedded in Quarto documents",
    "section": "Leaflet Example",
    "text": "Leaflet Example\n#| standalone: true\n\nimport ipyleaflet as L\nfrom htmltools import css\nfrom shiny import App, reactive, render, ui\nfrom shinywidgets import output_widget, reactive_read, register_widget\n\napp_ui = ui.page_fluid(\n    ui.div(\n        ui.input_slider(\"zoom\", \"Map zoom level\", value=12, min=1, max=18),\n        ui.output_ui(\"map_bounds\"),\n        style=css(\n            display=\"flex\", justify_content=\"center\", align_items=\"center\", gap=\"2rem\"\n        ),\n    ),\n    output_widget(\"map\"),\n)\n\n\ndef server(input, output, session):\n    # Initialize and display when the session starts (1)\n    map = L.Map(center=(51.476852, -0.000500), zoom=12, scroll_wheel_zoom=True)\n    # Add a distance scale\n    map.add_control(L.leaflet.ScaleControl(position=\"bottomleft\"))\n    register_widget(\"map\", map)\n\n    # When the slider changes, update the map's zoom attribute (2)\n    @reactive.Effect\n    def _():\n        map.zoom = input.zoom()\n\n    # When zooming directly on the map, update the slider's value (2 and 3)\n    @reactive.Effect\n    def _():\n        ui.update_slider(\"zoom\", value=reactive_read(map, \"zoom\"))\n\n    # Everytime the map's bounds change, update the output message (3)\n    @output\n    @render.ui\n    def map_bounds():\n        center = reactive_read(map, \"center\")\n        if len(center) == 0:\n            return\n\n        lat = round(center[0], 4)\n        lon = (center[1] + 180) % 360 - 180\n        lon = round(lon, 4)\n\n        return ui.p(f\"Latitude: {lat}\", ui.br(), f\"Longitude: {lon}\")\n\n\napp = App(app_ui, server)"
  }
]